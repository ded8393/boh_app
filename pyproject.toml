[project]
name = "boh-app"
version = "0.0.0"
license = "MIT"
description = "Companion app for Book of Hours"
readme = "README.rst"
authors = [
    { name = "Desiree D.", email = "ded8393@gmail.com" },
    { name = "Philipp A.", email = "flying-sheep@web.de" },
]
urls.Homepage = "https://github.com/ded8393/boh_app"
urls.Issues = "https://github.com/ded8393/boh_app/issues"
classifiers = [
    # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = []
requires-python =  ">=3.11"
dependencies = [
    "sqlalchemy>=2",
    "rich",        # better tracebacks
    "typer>=0.9",  # cli
    "fastapi",     # router
    "uvicorn",     # server
    "watchfiles",  # uvicorn and schema reload
    "vdf",         # steam vdf file parser
    "graphql-sqlalchemy @ git+https://github.com/flying-sheep/graphql-sqlalchemy.git@async",  # sqlchemy schema to graphql
    "ariadne",  # graphql API endpoint
    "marshmallow-sqlalchemy",
    "platformdirs",
]

[project.optional-dependencies]
test = ["pytest", "pytest-cov", "httpx"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
python = "3.11"
[tool.hatch.envs.default.scripts]
boh = "python -m boh_app {args}"

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
run = "pytest -vv {args}"
cov = "pytest --cov --cov-report=term --cov-report=xml -vv {args}"

[tool.ruff]
extend-exclude = ["static", "ci/templates"]
ignore = [
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101", # flake8-bandit assert
    "S308", # flake8-bandit suspicious-mark-safe-usage
    "E501", # pycodestyle line-too-long
]
line-length = 140
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "INT", # flake8-gettext
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint errors
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S", # flake8-bandit
    "TCH", # typecheck
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]
unfixable = ["F401", "F841"]
src = ["src", "tests"]

[tool.ruff.per-file-ignores]
"src/boh_app/__main__.py" = ["UP007"] # typer

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.isort]
forced-separate = ["conftest"]

[tool.ruff.flake8-bugbear]
# Allow default arguments like, e.g., `data: list[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.pytest.ini_options]
norecursedirs = ["migrations", "src", ".yarn"]
addopts = [
    "-ra",
    "--strict-markers",
    "--import-mode=importlib",
    "--doctest-modules",
    "--doctest-glob=\\*.rst",
    "--tb=short",
    "--pyargs",
]
filterwarnings = [
    "error", # warnings as errors
    "ignore:'typing.ByteString' is deprecated:DeprecationWarning:graphql",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
